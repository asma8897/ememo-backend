// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// enum example
enum Status {
  ACTIVE
  DEACTIVE
  DELETED
}

// enum MemoStatus {
//   PENDING
// }

// model Testing {
//   id Int @default(autoincrement()) @id
//   status ExampleStatus @default(ACTIVE)
// }

// prisma.testing.create({data: {s})
//https://www.prisma.io/docs/concepts/components/prisma-schema/relations#relation-fields-1

model User {
  id Int @default(autoincrement()) @id
  uid String
  name String
  jobTitle String
  email String
  password String
  createdOn DateTime @default(now())
  deletedOn DateTime?
  updatedOn DateTime?
  department Department @relation("UserDepartment", fields: [departmentId], references: [id])
  departmentId Int 
  company Company @relation("UserCompany", fields: [companyId], references: [id])
  companyId Int
  createdBy User? @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById Int?
  updatedBy User? @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById Int?
  deletedBy User? @relation("DeletedByUser", fields: [deletedById], references: [id])
  deletedById Int?
  status Status @default(ACTIVE)
  memoUserLoopTo MemoCcUser[] @relation("MemoUserLoop")
  createdDepartment Department[] @relation("CreatedByDepartment")
  updatedDepartment Department[] @relation("UpdatedByDepartment")
  deletedDepartment Department[] @relation("DeletedByDepartment")
  createdUser User[] @relation("CreatedByUser")
  updatedUser User[] @relation("UpdatedByUser")
  deletedUser User[] @relation("DeletedByUser")
  createdCompany Company[] @relation("CreatedByCompany")
  updatedCompany Company[] @relation("UpdatedByCompany")
  deletedCompany Company[] @relation("DeletedByCompany")
  createdProject Project[] @relation("CreatedByProject")
  updatedProject Project[] @relation("UpdatedByProject")
  deletedProject Project[] @relation("DeletedByProject")
  createdMemoType MemoType[] @relation("CreatedByMemoType")
  updatedMemoType MemoType[] @relation("UpdatedByMemoType")
  deletedMemoType MemoType[] @relation("DeletedByMemoType")
  attachmentCreatedByUser MemoAttachment[] @relation("MemoAttachmentCreatedByUser")
  commentedByUser MemoComment[] @relation("MemoCommentUser")
  approvedByUser MemoApproval[] @relation("MemoApproverUser")
  groups Group[] @relation("UserGroup")  
  memoCreatedByUser Memo[] @relation("MemoCreatedByUser")

  // approvals MemoApproval[]
  // memos Memo[]
  // createdMemo Memo[] @relation("CreatedByMemo")

}

model Group {
  id Int @default(autoincrement()) @id
  name String
  users User[] @relation("UserGroup")
  memoApproval MemoApproval[] @relation("MemoGroup")
}

model Department {
  id Int @default(autoincrement()) @id
  name String
  createdOn DateTime @default(now())
  updatedOn DateTime?
  status Status @default(ACTIVE)
  createdBy User? @relation("CreatedByDepartment", fields: [createdById], references: [id])
  createdById Int?
  updatedBy User? @relation("UpdatedByDepartment", fields: [updatedById], references: [id])
  updatedById Int?
  deletedBy User? @relation("DeletedByDepartment", fields: [deletedById], references: [id])
  deletedById Int?
  deletedOn DateTime?
  users User[] @relation("UserDepartment")
  // memo Memo?
  memo Memo [] @relation("MemoDepartment")
  memoType MemoType[] @relation("MemoTypeDepartment") 
}

model Company {
  id Int @default(autoincrement()) @id
  name String
  createdOn DateTime @default(now())
  updatedOn DateTime?
  status Status @default(ACTIVE)
  createdBy User? @relation("CreatedByCompany", fields: [createdById], references: [id])
  createdById Int?
  updatedBy User? @relation("UpdatedByCompany", fields: [updatedById], references: [id])
  updatedById Int?
  deletedBy User? @relation("DeletedByCompany", fields: [deletedById], references: [id])
  deletedById Int?
  deletedOn DateTime?
  users User[] @relation("UserCompany")
  // memo Memo?
  memo Memo[] @relation("MemoCompany")
}

model Project {
  id Int @default(autoincrement()) @id
  name String
  createdOn DateTime @default(now())
  updatedOn DateTime?
  createdBy User? @relation("CreatedByProject", fields: [createdById], references: [id])
  createdById Int?
  updatedBy User? @relation("UpdatedByProject", fields: [updatedById], references: [id])
  updatedById Int?
  deletedBy User? @relation("DeletedByProject", fields: [deletedById], references: [id])
  deletedById Int?
  deletedOn DateTime?
  status Status @default(ACTIVE)
  // memo Memo? @relation("MemoProject")  
  memo Memo [] @relation("MemoProject")
}

model MemoType {
  id Int @default(autoincrement()) @id
  name String
  department Department? @relation("MemoTypeDepartment", fields: [departmentId], references: [id])
  departmentId Int
  createdOn DateTime? @default(now())
  updatedOn DateTime?
  createdBy User? @relation("CreatedByMemoType", fields: [createdById], references: [id])
  createdById Int?
  updatedBy User? @relation("UpdatedByMemoType", fields: [updatedById], references: [id])
  updatedById Int?
  deletedBy User? @relation("DeletedByMemoType", fields: [deletedById], references: [id])
  deletedById Int?
  deletedOn DateTime?
  status Status @default(ACTIVE)
  // memo Memo? @relation("MemoType")
  memo Memo[] @relation("MemosType")
}

model Memo {
  id Int @default(autoincrement()) @id
  addressTo String
  from String
  department Department @relation("MemoDepartment", fields: [departmentId], references: [id])
  departmentId Int 
  company Company @relation("MemoCompany", fields: [companyId], references: [id])
  companyId Int 
  memoType MemoType @relation("MemosType", fields: [memoTypeId], references: [id])
  memoTypeId Int 
  createdBy User @relation("MemoCreatedByUser", fields: [userId], references: [id])
  userId Int
  status MemoStatus @relation("MemoStatus", fields: [memoStatusId], references: [id])
  memoStatusId Int 
  createdOn DateTime @default(now())
  updatedOn DateTime @default(now())
  submittedOn DateTime @default(now())
  subject String
  content String @db.LongText
  executiveChairman Boolean?

  approvals MemoApproval[] @relation("MemoApprover")
  attachments MemoAttachment[] @relation("MemoAttachment")
  ccUser MemoCcUser[] @relation("MemoCcUser")
  projects Project[] @relation("MemoProject")
  // memoCreatedByUser User[] @relation("MemoCreatedByUser")

  // createdBy User? @relation("CreatedByMemo", fields: [userId], references: [id])
  // userId Int
}

model MemoApproval {
  id Int @default(autoincrement()) @id
  order Int
  // memoStatus MemoStatus? @relation(fields: [memoStatusId], references: [id]) 
  // memoStatusId Int 
  approvedByUser User @relation("MemoApproverUser", fields: [userId], references: [id])
  userId Int
  // groupApproval Group @relation("MemoGroup", fields: [groupId], references: [id])
  // groupId Int
  memo Memo @relation("MemoApprover", fields: [memoId], references: [id])
  memoId Int
  createdOn DateTime @default(now())
  groupApproval Group[] @relation("MemoGroup")
  
  // memos Memo[] @relation("MemoApprover")
  // memoApprovedBy User[] @relation("MemoApproverUser")

  // memo Memo? @relation(fields: [memoId], references: [id])
  // group Group? @relation(fields: [groupId], references: [id])
  // memoId Int @unique
  // groupId Int
  // userId Int
}

model MemoAttachment {
  id Int @default(autoincrement()) @id
  url String
  gspath String
  fileName String
  memo Memo @relation("MemoAttachment", fields: [memoId], references: [id])
  memoId Int
  createdByUser User @relation("MemoAttachmentCreatedByUser", fields: [userId], references: [id])
  userId Int

  // memos Memo[] @relation("MemoAttachment")
  // attachmentCreatedByUser User[] @relation("MemoAttachmentCreatedByUser")

  // memo Memo? @relation(fields: [memoId], references: [id])
  // user User @relation("MemoAttachmentUser", fields: [userId], references: [id])
  // memoId Int @unique
  // userId Int
}

model MemoCcUser {
  id Int @default(autoincrement()) @id
  memo Memo @relation("MemoCcUser", fields: [memoId], references: [id])
  memoId Int
  userLoop User @relation("MemoUserLoop", fields: [userId], references: [id])
  userId Int

  // memos Memo[] @relation("MemoCcUser")
  // memoUserLoop User[] @relation("MemoUserLoop")

  // memo Memo @relation("MemoCcUserId", fields: [memoId], references: [id])
  // user User? @relation(fields: [userId], references: [id])
  // memoId Int @unique
  // userId Int
}

model MemoComment {
  id Int @default(autoincrement()) @id
  comments String
  commentedByUser User @relation("MemoCommentUser", fields: [userId], references: [id])
  userId Int
}

model MemoStatus {
  id Int @default(autoincrement()) @id
  name String
  memo Memo[] @relation("MemoStatus")
  // memoApproval MemoApproval[]
}

// model test {
//   id Int @default(autoincrement()) @id
//   name String
//   age String @default(0)
// }

// this.prisma.test.create({data: {name: 'BoB', age: '26'}});
// this.prisma.test.create({data: {name: 'BoB'}});



// Attachments
// url
// name
// gspath /ememo/uadifasdifsaidf.pdf

// model SubjectContentDetails {
//   id Int @default(autoincrement()) @id
//   memoDetails Memo @relation(fields: [memoDetailsId], references: [id])
//   memoDetailsId Int 
//   subjectTitle String
//   subjectContent String
//   subjectAttachment String?
//   // approvalFlowDetails ApprovalFlowDetails?
//   approvals ApprovalFlowDetails[]
// }

// model ApprovalFlowDetails {
//   id Int @default(autoincrement()) @id
//   subjectContentDetails SubjectContentDetails @relation(fields: [subjectContentId], references: [id])
//   subjectContentId Int @unique
//   approver User? @relation("Approver", fields: [approverUserId], references: [id])
//   approverUserId Int?
//   ccApprover User? @relation("CcApprover", fields: [ccApproverUserId], references: [id])
//   ccApproverUserId Int?
//   daysToApprove String
//   executiveChairmanUserId User @relation("ExecutiveChairman", fields: [executiveUserId], references: [id])
//   executiveUserId Int
// }

